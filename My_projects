--Вибираємо необхідні дані з бази даних

select ad_date ,
		spend ,
		clicks,
		spend/clicks as CPC --вартість одного кліка
from facebook_ads_basic_daily fabd 
where clicks > 0
order by ad_date desc
;

--------------------------------------------------------------------------------------
--Вибираємо необхідні дані та рахуємо метрики CPC, CPM, CTR, ROMI

select ad_date ,
		campaign_id ,
		sum(spend) as amout_ad_spend,
		sum (impressions)as cnt_impressions,
		sum(clicks) as sum_clics,
		sum(value) as amount_value,
		round(sum (spend)::numeric /sum (clicks),2)as CPC,
		round( (sum (spend)::numeric/sum(impressions)*1000),2) as CPM,
		round ((sum(clicks)::numeric/sum (impressions)*100),1) as CTR, --%
		round(sum(value)::numeric /sum (spend),2) as ROMI
from  facebook_ads_basic_daily fabd 
group by ad_date , 
		campaign_id 
having campaign_id is not null and sum(clicks)>0
;

-------------------------------------------------------------------------------------------
--Серед кампаній з загальною сумою витрат більше 500 000 знаходимо кампанію з найвищим ROMI

select campaign_id 
from facebook_ads_basic_daily fabd
group by campaign_id 
having campaign_id is not null and sum (spend)>500000 
order by round( sum(value) :: numeric /sum (spend),2) desc
limit 1
;

---------------------------------------------------------------------------------------------
--Поєднуємо дві таблиці використовуючи union та отримуємо необхідні нам дані

with all_data_ad as (
	select   
	        ad_date,
			'Facebook Ads' as media_source,
			sum(spend) as spend_sum,
			sum (impressions)as impressions_sum,
			sum (reach) as reach_sum,
			sum (clicks) as clicks_sum,
			sum (leads) as leads_sum,
			sum(value) as value_sum 
	From facebook_ads_basic_daily fabd
	where ad_date is not null
	group by ad_date
	union
	select  
	          ad_date,
			  'Google Ads' as media_source,
			 sum(spend) as spend_sum,
			sum (impressions)as impressions_sum,
			sum (reach) as reach_sum,
			sum (clicks) as clicks_sum,
			sum (leads) as leads_sum,
			sum(value) as value_sum 
	from google_ads_basic_daily 
	where ad_date is not null
	group by ad_date
	)
 select ad_date , 
		media_source,
		sum(spend_sum) as spend_sum,
		sum (impressions_sum) as impressions_sum,
		sum (clicks_sum) as clicks_sum,
		sum(value_sum) as value_sum 
from all_data_ad
group by ad_date, media_source
;

------------------------------------------------------------------------------------------
--Шукаємо дані поєднавши чотиритаблиці за допомогою join

with marketing_campaigns as (
    select 
    	fabd.ad_date,
      	fc.campaign_name,
       	fa.adset_name,
      	fabd.spend,
        fabd.impressions,
      	fabd.reach ,
        fabd.clicks ,
        fabd.leads,
        fabd.value,
        'Facebook_Ads' as media_sourse
    from facebook_ads_basic_daily as fabd 
    left join facebook_campaign   as fc on fc.campaign_id = fabd.campaign_id 
    left  join facebook_adset      as fa on fabd.adset_id = fa.adset_id
    where fabd.campaign_id is not null
union all
    select 
   		ad_date,
      	campaign_name,
       	adset_name,
      	spend,
        impressions,
      	reach ,
        clicks ,
        leads,
        value,
        'Google_Ads' as media_source 
    from google_ads_basic_daily gabd 
)
select ad_date,
	   media_sourse,
	   campaign_name,
	   adset_name,
	   sum (spend) as total_spend,
	   sum (impressions) as total_impressions,
	   sum (clicks) as total_clicks,
	   sum (value) as total_value
     from marketing_campaigns
group by 1,2,3,4
;

------------------------------------------------------------------------------------------------------------------------------------------------------------
--Визначаємо кампанію з найвищим ROMI серед усіх кампаній з загальною сумою витрат більше 500 000. В цій кампанії визначємо групу оголошень з найвищим ROMI.

with marketing_campaigns as (
    select 
    	fabd.ad_date,
      	fc.campaign_name,
       	fa.adset_name,
      	fabd.spend,
        fabd.value,
        'Facebook_Ads' as media_sourse
    from facebook_ads_basic_daily  as fabd 
    left join facebook_campaign    as fc on fc.campaign_id = fabd.campaign_id 
    left  join facebook_adset      as fa on fabd.adset_id = fa.adset_id
    where fabd.campaign_id is not null
union all
    select 
   		ad_date,
      	campaign_name,
       	adset_name,
      	spend,
        value,
        'Google_Ads' as media_source 
    from google_ads_basic_daily gabd 
)
      select campaign_name,
           adset_name    
	  from marketing_campaigns
     group by 1,2
     having  sum(spend)> 500000
     order by round(sum(value)::numeric/sum (spend),2) desc
     limit 1
;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--Застосування операторів для роботи з рядками, умовні оператори та оператори з відсутніми значеннями

with campaigns_metrics as (
    select 
    	fabd.ad_date,
    	campaign_name,
      	fabd.url_parameters, 
      	coalesce (fabd.spend,0) as spend,
        coalesce (fabd.impressions,0) as impressions,
        coalesce (fabd.reach ,0) as reach,
        coalesce (fabd.clicks ,0) as clicks,
        coalesce (fabd.leads,0) as leads,
        coalesce (fabd.value,0) as value
    from facebook_ads_basic_daily as fabd 
    left join facebook_campaign   as fc on fc.campaign_id = fabd.campaign_id 
    --left  join facebook_adset      as fa on fabd.adset_id = fa.adset_id
union all
    select 
   		ad_date,
   		campaign_name,
   		url_parameters, 
      	coalesce (spend,0)as spend,
        coalesce (impressions,0)as impressions,
      	coalesce (reach ,0)as reach,
        coalesce (clicks ,0)as clicks,
        coalesce (leads,0)as leads,
        coalesce (value,0)as value
      from google_ads_basic_daily gabd 
)
select ad_date,
	   campaign_name,
	   url_parameters, 
case 
	when lower( substring(url_parameters, 'utm_campaign=([^&#$]+)')) = 'nan' then null 
	else lower( substring(url_parameters, 'utm_campaign=([^&#$]+)'))  
end as utm_campaign,
	   sum (spend) as total_spend,
	   sum (impressions) as total_impressions,
	   sum (clicks) as total_clicks,
	   sum (value) as total_value,
case 
	when sum (impressions) > 0 
	then round ((sum(clicks)::numeric/sum (impressions)*100),1) 
	else 0
	end as CTR, 
case 
	when sum (clicks) > 0 
	then round (sum (spend)::numeric /sum (clicks),2)
	else 0
	end as CPC, 	
case 
	when sum(impressions) > 0 
	then round ((sum (spend)::numeric/sum(impressions)*1000),2) 
	else 0
	end as CPM,	
case 
	when sum (spend) > 0 
	then round(sum(value)::numeric /sum (spend),2) 
	else 0
	end as ROMI
from campaigns_metrics
group by 1,2,3
;

--------------------------------------------------------------------------------------------------------------------------------
--віконні функції та функції роботи з датами
--через self-join-- 

with campaigns_metrics as (
    select 
    	fabd.ad_date,
    	campaign_name,
      	fabd.url_parameters, 
      	coalesce (fabd.spend,0) as spend,
        coalesce (fabd.impressions,0) as impressions,
        coalesce (fabd.reach ,0) as reach,
        coalesce (fabd.clicks ,0) as clicks,
        coalesce (fabd.leads,0) as leads,
        coalesce (fabd.value,0) as value
    from facebook_ads_basic_daily as fabd 
    left join facebook_campaign   as fc on fc.campaign_id = fabd.campaign_id 
    union all
    select 
   		ad_date,
   		campaign_name,
   		url_parameters, 
      	coalesce (spend,0)as spend,
        coalesce (impressions,0)as impressions,
      	coalesce (reach ,0)as reach,
        coalesce (clicks ,0)as clicks,
        coalesce (leads,0)as leads,
        coalesce (value,0)as value
      from google_ads_basic_daily gabd 
),
 campaigns_metrics_month as (
    select 
        date_trunc('month', ad_date::date) as ad_month,
        case 
		    when lower( substring(url_parameters, 'utm_campaign=([^&#$]+)')) = 'nan' then null 
		    else lower( substring(url_parameters, 'utm_campaign=([^&#$]+)'))  
		    end as utm_campaign,
	    sum (spend) as total_spend,
	    sum (impressions) as total_impressions,
	    sum (clicks) as total_clicks,
	    sum (value) as total_value,
		case 
			when sum (impressions) > 0 
			then round ((sum(clicks)::numeric/sum (impressions)*100),1) 
			else 0
			end as CTR, 
		case 
			when sum (clicks) > 0 
			then round (sum (spend)::numeric /sum (clicks),2)
			else 0
			end as CPC, 	
		case 
			when sum(impressions) > 0 
			then round ((sum (spend)::numeric/sum(impressions)*1000),2) 
			else 0
			end as CPM,	
		case 
			when sum (spend) > 0 
			then round((sum(value)::numeric- sum (spend)::numeric) /sum (spend)::numeric,2) 
			else 0
			end as ROMI
     from campaigns_metrics
     group by 1,2
),
  campaigns_metrics_comparison as (
       select 
	       cmm.ad_month as ad_month,
	       cmm.utm_campaign as utm_campaign ,
	       cmm.total_spend as total_spend,
	       cmm.total_impressions as total_impressions,
	       cmm.total_clicks as total_clicks,
	       cmm.total_value as total_value,
	       cmm.CTR as CTR,
	       cmm_prev.CTR as CTR1m,
	       cmm.CPC as CPC,
	       cmm.CPM as CPM,
	       cmm_prev.CPM as CPM1m,
	       cmm.ROMI as ROMI,
	       cmm_prev.ROMI as ROMI1m
	       from campaigns_metrics_month as cmm
	   left join campaigns_metrics_month as cmm_prev on cmm.ad_month = cmm_prev.ad_month + interval '1 month'
	         and cmm.utm_campaign = cmm_prev.utm_campaign
	         order by 1,2 desc 
)
select     
	ad_month,
	utm_campaign,
	total_spend,
	total_impressions,
	total_clicks,
	total_value,	    
	case 
		when CTR1m > 0 
		then round((CTR-CTR1m)/CTR1m,2) 
		end as CTR_difference ,
	CPC,
	case 
		when CPM1m > 0 
		then round((CPM-CPM1m)/CPM1m,2)
		end as CPM_difference,
	case 
		when ROMI1m > 0 
		then round((ROMI-ROMI1m)/ROMI1m,2)
		end as ROMI_difference
from campaigns_metrics_comparison
order by 1,2 desc
;
     
--через lag-- 

with campaigns_metrics as (
    select 
    	fabd.ad_date,
    	campaign_name,
      	fabd.url_parameters, 
      	coalesce (fabd.spend,0) as spend,
        coalesce (fabd.impressions,0) as impressions,
        coalesce (fabd.reach ,0) as reach,
        coalesce (fabd.clicks ,0) as clicks,
        coalesce (fabd.leads,0) as leads,
        coalesce (fabd.value,0) as value
    from facebook_ads_basic_daily as fabd 
    left join facebook_campaign   as fc on fc.campaign_id = fabd.campaign_id 
    union all
    select 
   		ad_date,
   		campaign_name,
   		url_parameters, 
      	coalesce (spend,0)as spend,
        coalesce (impressions,0)as impressions,
      	coalesce (reach ,0)as reach,
        coalesce (clicks ,0)as clicks,
        coalesce (leads,0)as leads,
        coalesce (value,0)as value
    from google_ads_basic_daily gabd 
),
 campaigns_metrics_month as (
    select 
        date_trunc('month', ad_date::date) as ad_month,
        case 
		    when lower( substring(url_parameters, 'utm_campaign=([^&#$]+)')) = 'nan' then null 
		    else lower( substring(url_parameters, 'utm_campaign=([^&#$]+)'))  
		    end as utm_campaign,
	    sum (spend) as total_spend,
	    sum (impressions) as total_impressions,
	    sum (clicks) as total_clicks,
	    sum (value) as total_value,
		case 
			when sum (impressions) > 0 
			then round ((sum(clicks)::numeric/sum (impressions)*100),1) 
			else 0
			end as CTR, 
		case 
			when sum (clicks) > 0 
			then round (sum (spend)::numeric /sum (clicks),2)
			else 0
			end as CPC, 	
		case 
			when sum(impressions) > 0 
			then round ((sum (spend)::numeric/sum(impressions)*1000),2) 
			else 0
			end as CPM,	
		case 
			when sum (spend) > 0 
			then round((sum(value)::numeric - sum(spend)::numeric)/sum (spend),2)::numeric 
			else 0
			end as ROMI
     from campaigns_metrics
     group by 1,2
),
campaigns_metrics_comparison as (
       select 
	       ad_month,
	       utm_campaign,
	       total_spend,
	       total_impressions,
	       total_clicks,
	       total_value,
	       CTR,
	       lag(CTR) over (partition by utm_campaign order by ad_month, utm_campaign) as CTR_1m_ago,
	       CPC,
	       CPM,
	       lag(CPM) over (partition by utm_campaign order by ad_month, utm_campaign) as CPM_1m_ago,
	       ROMI,
	       lag(ROMI) over (partition by utm_campaign order by ad_month, utm_campaign) as ROMI_1m_ago
	   from campaigns_metrics_month as cmm
	   order by 1,2 desc
)
select     
	ad_month,
	utm_campaign,
	total_spend,
	total_impressions,
	total_clicks,
	total_value,	    
	case 
		when CTR_1m_ago > 0 
		then round((CTR-CTR_1m_ago)/CTR_1m_ago,2) 
		end as CTR_difference ,
	CPC,
	case 
		when CPM_1m_ago > 0 
		then round((CPM-CPM_1m_ago)/CPM_1m_ago,2)
		end as CPM_difference,
	case 
		when ROMI_1m_ago > 0 
		then round((ROMI-ROMI_1m_ago)/ROMI_1m_ago,2)
		end as ROMI_difference
from campaigns_metrics_comparison	       
order by 1,2 desc 
;


